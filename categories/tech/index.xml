<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on 懒人的梦呓</title>
    <link>https://cjianyu.github.io/categories/tech/</link>
    <description>Recent content in Tech on 懒人的梦呓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 27 Mar 2019 20:34:33 +0800</lastBuildDate>
    
	<atom:link href="https://cjianyu.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正则表达式必知必会</title>
      <link>https://cjianyu.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 27 Mar 2019 20:34:33 +0800</pubDate>
      
      <guid>https://cjianyu.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;正则表达式主要还是知识点多而杂，看过很容易忘，所以，看完知识点及时练习很重要。&lt;/p&gt;

&lt;h4 id=&#34;首先-掌握一些常用的元字符&#34;&gt;首先，掌握一些常用的元字符：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/18615652/49017455-d9cfef80-f1c3-11e8-96c3-dc687c97839e.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;值得一说的是\b\B表示边界，可以在匹配结束时使用。&lt;/p&gt;

&lt;h4 id=&#34;其次是掌握必要的量词意义&#34;&gt;其次是掌握必要的量词意义：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/18615652/49018022-3da6e800-f1c5-11e8-8089-5e752d1ca844.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;然后我们了解一下分支与字符集的概念&#34;&gt;然后我们了解一下分支与字符集的概念。&lt;/h4&gt;

&lt;p&gt;类似[abc]的，就是一个字符集，表示匹配方括号里面的一个字符。这里[abc] == [a-c]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>聊聊css布局</title>
      <link>https://cjianyu.github.io/post/css_layout/</link>
      <pubDate>Sun, 24 Mar 2019 00:17:03 +0800</pubDate>
      
      <guid>https://cjianyu.github.io/post/css_layout/</guid>
      <description>&lt;h3 id=&#34;从normal-flow说起&#34;&gt;从normal flow说起&lt;/h3&gt;

&lt;p&gt;我们知道，书本印刷的排版是从上而下，从左到右，一行装不下换行，依次排列的规则，css中正常流也是这种规则。不同的是，css标准中有格式化上下文的概念。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Css标准中，规定如何排布文字或盒的算法，这个算法依赖一个排版的“当前现状”，css把这个当前状态称为“格式化上下文”。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;格式化上下文又分为块级格式化上下文和行内级格式化上下文。块级格式化上下文从上到下依次排列，行内级格式化上下文从左到右依次排列，排不下换行。&lt;/p&gt;

&lt;p&gt;所以，遇到一个元素需要排版，一般有以下三种情况：
* 遇到块级盒，排入块级格式化上下文
* 遇到行内级盒或文字，排入行内级格式化上下文，排不下创建一个行盒排版，行盒会创建一个行内级格式化上下文。（行盒是块级，所以又到上一种情况）
* 遇到float盒，将float盒的顶部盒当前行内级上下文上边缘对齐，float方向的那条边对齐，重新排版&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>